# Procesamiento del archivo CSV desde GitHub
import pandas as pd
from tabulate import tabulate

# URL del archivo CSV en GitHub
csv_url = 'https://raw.githubusercontent.com/CESAR729/tareamodelos/main/Suministros.csv'

try:
    # Cargar el archivo CSV desde la URL
    df = pd.read_csv(csv_url, sep=';')
    if df.empty:
        print("Error: El archivo CSV está vacío o no contiene datos válidos.")
        exit()
except Exception as e:
    print(f"Error al leer el archivo CSV desde GitHub: {e}")
    exit()

try:
    # Convertir el DataFrame a Markdown
    markdown_table = tabulate(df, headers='keys', tablefmt='pipe', showindex=False)
    with open('README.md', 'a', encoding='utf-8') as f:
        f.write("\n## Contenido del archivo CSV\n\n")
        f.write(markdown_table + "\n")
    print("Contenido del archivo CSV agregado correctamente a README.md")
except Exception as e:
    print(f"Error al procesar el archivo CSV: {e}")
    exit()

# Clasificación usando el dataset Iris
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

iris = load_iris()
X = iris.data
y = iris.target

# Dividir los datos
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Entrenar el modelo Naive Bayes
model = GaussianNB()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluar el modelo
print("\nResultados del modelo Naive Bayes:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Clasificar nuevos datos
new_samples = [[5.1, 3.5, 1.4, 0.2], [6.7, 3.0, 5.2, 2.3]]
predictions = model.predict(new_samples)

for sample, pred in zip(new_samples, predictions):
    print(f"Características: {sample} -> Clase predicha: {iris.target_names[pred]}")
