import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Crear un conjunto de datos simulado para consumo energético
data = {
    'Superficie (m2)': [60, 80, 100, 120, 140, 160, 200, 220, 250, 300],
    'Habitantes': [2, 3, 4, 4, 5, 6, 6, 7, 8, 9],
    'Años construcción': [20, 15, 30, 10, 5, 25, 8, 12, 35, 40],
    'Consumo (kWh)': [300, 400, 500, 600, 700, 800, 900, 1000, 1200, 1500]
}

df = pd.DataFrame(data)

# Seleccionar características y objetivo
features = ['Superficie (m2)', 'Habitantes', 'Años construcción']
target = 'Consumo (kWh)'

# Extraer las características y el objetivo
X = df[features].values
y = df[target].values

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Escalar los datos para normalizar las características
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Crear y entrenar el modelo KNN
knn = KNeighborsRegressor(n_neighbors=3)  # Usamos K=3 vecinos
knn.fit(X_train, y_train)

# Realizar predicciones
y_pred = knn.predict(X_test)

# Calcular métricas de desempeño
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Predicciones para nuevos datos
nuevo_dato = np.array([[150, 5, 10]])  # Ejemplo de nuevos datos
nuevo_dato_escalado = scaler.transform(nuevo_dato)
prediccion_nuevo_dato = knn.predict(nuevo_dato_escalado)

# Guardar los resultados en una variable para escribirlos en un archivo
resultados = f"""
### Resultados del modelo KNN:
- MAE: {mae:.2f}
- MSE: {mse:.2f}
- R2 Score: {r2:.2f}

### Predicciones:
- Predicción para nuevo dato (Superficie=150m2, Habitantes=5, Años construcción=10): {prediccion_nuevo_dato[0]:,.2f} kWh
"""

# Guardar los resultados y las predicciones en un archivo .md
with open("KNN_Energy_Prediction.md", "w") as f:
    f.write(resultados)

# Imprimir los resultados
print(resultados)
